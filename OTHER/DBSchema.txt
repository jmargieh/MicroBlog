
/* CREATE TABLES STATEMENT, The Strings of each SQL statements in AppConstants.java explains the use of each statement as well */


/*
* CREATE MESSAGES table msgID is a PRIMARY increasing key (No two messages will have the same ID)
*/
CREATE TABLE MESSAGES( msgID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), Posted_by_userID INTEGER NOT NULL, Posted_by_Nickname varchar(255) NOT NULL, Date varchar(255) NOT NULL, Content varchar(255) NOT NULL, Republished_count INTEGER NOT NULL, PRIMARY KEY (msgID) )

/*
* CREATE USERS table userID is a PRIMARY increasing key (No two users will have the same ID)
*/			
CREATE TABLE USERS( userID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), UserName varchar(255) NOT NULL, Password varchar(255) NOT NULL, Nickname varchar(255) NOT NULL, Description varchar(32672), PhotoURL varchar(255), Following_count INTEGER, Follower_count INTEGER, PRIMARY KEY (userID) )

/*
* CREATE FOLLOWING table ID is a PRIMARY increasing key.
*/				
CREATE TABLE FOLLOWING( ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), userID INTEGER NOT NULL,Following_userID INTEGER NOT NULL, PRIMARY KEY (ID) )

/*
* CREATE FOLLOWER table ID is a PRIMARY increasing key.
*/	
CREATE TABLE FOLLOWER( ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), userID INTEGER NOT NULL,Follower_userID INTEGER NOT NULL, PRIMARY KEY (ID) )
SELECT * FROM USERS


/* CREATE TABLES STATEMENT */


/* SELECT, UPDATE, INSERT SQL STATEMENTS USED TO MANIPULATE APACHE DERBY DB */

SELECT_USER_BY_userID_STMT = "SELECT * FROM USERS WHERE userID=?

SELECT * FROM USERS WHERE UserName=? OR Nickname=?

SELECT * FROM USERS WHERE Nickname=?

SELECT * FROM USERS WHERE UserName=? AND Password=?

INSERT INTO USERS(Username, Password, Nickname, Description, PhotoURL, Following_count, Follower_count) VALUES(?,?,?,?,?,?,?)

SELECT * FROM FOLLOWING WHERE userID=?

SELECT * FROM FOLLOWER INNER JOIN USERS ON FOLLOWER.Follower_userID = USERS.userID WHERE FOLLOWER.userID=?

/*
* Select All followers of certain users ordered by follower_count (in USERS table) descending, INNER JOIN to get followers info from USERS table as well
* what we get is the two tables put into one table. (Followers table next to the users table)
*/
SELECT * FROM FOLLOWER INNER JOIN USERS ON FOLLOWER.Follower_userID = USERS.userID WHERE FOLLOWER.userID=? ORDER BY USERS.follower_count DESC

SELECT * FROM FOLLOWING INNER JOIN USERS ON FOLLOWING.Following_userID = USERS.userID WHERE FOLLOWING.userID=?

/*
* Select All following of certain users ordered by follower_count (in USERS table) descending, INNER JOIN to get following info from USERS table as well
* what we get is the two tables put into one table. (Following table next to the users table)
*/
SELECT * FROM FOLLOWING INNER JOIN USERS ON FOLLOWING.Following_userID = USERS.userID WHERE FOLLOWING.userID=? ORDER BY USERS.follower_count DESC

/*
* Select All messages ordered by msgID descending, INNER JOIN with users to get info of the message author from USERS table by id
* what we get is the two tables put into one table. (Messages table next to the users table)
*/
SELECT * FROM MESSAGES INNER JOIN USERS ON MESSAGES.Posted_by_userID = USERS.userID ORDER BY MESSAGES.msgID DESC";

/*
* Select All messages ordered by msgID descending of certain userID, INNER JOIN with users to get info of the message author from USERS table by id
* what we get is the two tables put into one table. (Messages table next to the users table(users will contain the same user))
*/
SELECT * FROM MESSAGES INNER JOIN USERS ON MESSAGES.Posted_by_userID = USERS.userID WHERE MESSAGES.Posted_by_userID=? ORDER BY MESSAGES.msgID DESC

/*
* Select All messages ordered by msgID descending Excluding messages posted by Posted_by_userID,
* INNER JOIN with users to get info of the message author from USERS table by id
* what we get is the two tables put into one table. (Messages table next to the users table)
*/
SELECT * FROM MESSAGES INNER JOIN USERS ON MESSAGES.Posted_by_userID = USERS.userID WHERE MESSAGES.Posted_by_userID <> ? ORDER BY MESSAGES.msgID DESC
INSERT INTO FOLLOWING(userID, Following_userID) VALUES(?,?)


INSERT INTO FOLLOWER(userID, Follower_userID) VALUES(?,?)

UPDATE USERS SET following_count=following_count+1 WHERE userID=?

UPDATE USERS SET follower_count=follower_count+1 WHERE userID=?

SELECT * FROM FOLLOWING WHERE userID=? AND Following_userID=?

SELECT * FROM MESSAGES WHERE Posted_by_userID=?

SELECT * FROM MESSAGES

INSERT INTO MESSAGES(Posted_by_userID, Posted_by_Nickname, Date, Content, Republished_count) VALUES(?,?,?,?,?)

UPDATE MESSAGES SET Republished_count=Republished_count+1 WHERE msgID=?

SELECT * FROM MESSAGES WHERE Posted_by_userID=? ORDER BY MESSAGES.msgID DESC


/* CREATE TABLES STATEMENT, The Strings of each SQL statements in AppConstants.java explains the use of each statement as well */

